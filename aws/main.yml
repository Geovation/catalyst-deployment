---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Catalyst tool deployment on AWS. Includes Lambda functions and an endpoints deployed through API Gateway.
Parameters:
  NGDWrapperLambdaFunctionName:
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
    Description: The name of the NGD Wrapper Lambda function
    Default: Lambda-NGDWrapper
  ONSGeographiesLambdaFunctionName:
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
    Description: The name of the ONS Geographies Lambda function
    Default: Lambda-ONSGeographies
  ApiGatewayStageName:
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*
    Description: The stage name for the API Gateway deployment
    Default: prod
  S3BucketName:
    Type: String
    MinLength: 3
    MaxLength: 64
    AllowedPattern: "[a-z0-9][a-z0-9-]*[a-z0-9]"
    Description: The name of the S3 bucket to store Lambda code
    Default: catalyst-data-store
  ONSGeographyDBFilePath:
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_-]*"
    Description: The name of the ONS Geography database file
    Default: ons_postcodes.duckdb
  OSDataHubProjectKey:
    Type: String
    MinLength: 0
    MaxLength: 32
    AllowedPattern: "[a-zA-Z0-9]*"
    Description: Your Project API Key from the OS Data Hub. If given, the API Gateway will be protected by an API key.
    Default: ""
  OSDataHubProjectSecret:
    Type: String
    MinLength: 0
    MaxLength: 16
    AllowedPattern: "[a-zA-Z0-9]*"
    Description: The Project API Secret from the OS Data Hub. If given, the API Gateway will be protected by an API key.
    Default: ""
  ApiKeyName:
    Type: String
    MinLength: 0
    MaxLength: 128
    AllowedPattern: '[\w+=,.@-]+'
    Description: The name of the API key to be created for the API Gateway usage plan if DataHub credentials are supplied.
    Default: CatalystApiKey

Conditions:
  GatewayAuthRequired: !Or
    - !Not [!Equals [!Ref OSDataHubProjectKey, ""]]
    - !Not [!Equals [!Ref OSDataHubProjectSecret, ""]]

Resources:

  # === S3 Bucket Population ===

  LambdaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName

  InitFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3WriteDeletePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${LambdaBucket.Arn}/*"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"

  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CatalystInitFunction
      Description: Populates S3 bucket with the NGD Wrapper code, or cleans up (ie. deletes) if requested.
      Handler: index.handler
      Role: !GetAtt InitFunctionRole.Arn
      Runtime: python3.13
      MemorySize: 512
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import urllib.request
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          ngd_wrappers_url = "https://github.com/Geovation/catalyst-ngd-wrappers-aws/releases/latest/download/aws_lambda_release.zip"
          ons_geographies_url = "https://github.com/Geovation/catalyst-ons-geographies-aws/releases/latest/download/aws_lambda_release.zip"
          ons_geographies_db_url = "https://github.com/Geovation/catalyst-ons-geographies-db/releases/latest/download/ons_postcodes.duckdb"

          def send_response(event, context, status, reason=None):
              response_body = {
                  'Status': status,
                  'Reason': reason or 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }

              response_url = event['ResponseURL']
              json_response_body = json.dumps(response_body).encode('utf-8')

              try:
                  req = urllib.request.Request(
                      url=response_url,
                      data=json_response_body,
                      method='PUT',
                      headers={
                          'Content-Type': '',
                          'Content-Length': str(len(json_response_body))
                      }
                  )
                  with urllib.request.urlopen(req) as response:
                      logger.info(f"CloudFormation response status: {response.status}")
              except Exception as e:
                  logger.error(f"Failed to send response: {str(e)}")

          def handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")

              try:
                  s3 = boto3.client('s3')
                  bucket = event['ResourceProperties']['BucketName']
                  ngd_key = event['ResourceProperties'].get('NGDKeyName', 'ngd_wrappers_lambda.zip')
                  ons_key = event['ResourceProperties'].get('ONSKeyName', 'ons_geographies_lambda.zip')
                  ons_db_key = event['ResourceProperties'].get('ONSDBKeyName', 'ons_geographies_db.duckdb')
                  cleanup = event['ResourceProperties'].get('Cleanup', False)

                  if event['RequestType'] in ['Create', 'Update']:
                      if cleanup:
                          logger.info("Delete request received, removing S3 objects.")
                          s3.delete_object(
                              Bucket=bucket,
                              Key=ngd_key
                          )
                          logger.info(f"Deleted {ngd_key} from bucket {bucket}.")
                          s3.delete_object(
                              Bucket=bucket,
                              Key=ons_key
                          )
                          logger.info(f"Deleted {ons_key} from bucket {bucket}.")
                      else:
                          response = urllib.request.urlopen(ons_geographies_db_url)
                          db_data = response.read()
                          s3.put_object(
                              Bucket=bucket,
                              Key=ons_db_key,
                              Body=db_data
                          )
                          logger.info(f"Uploaded {ons_db_key} to bucket {bucket}.")
                          response = urllib.request.urlopen(ngd_wrappers_url)
                          zip_data = response.read()
                          s3.put_object(
                              Bucket=bucket,
                              Key=ngd_key,
                              Body=zip_data
                          )
                          del response, zip_data  # Free memory
                          logger.info(f"Uploaded {ngd_key} to bucket {bucket}.")
                          response = urllib.request.urlopen(ons_geographies_url)
                          zip_data = response.read()
                          s3.put_object(
                              Bucket=bucket,
                              Key=ons_key,
                              Body=zip_data
                          )
                          logger.info(f"Uploaded {ons_key} to bucket {bucket}.")
                  send_response(event, context, "SUCCESS")

              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  send_response(event, context, "FAILED", reason=str(e))

  Initialize:
    Type: Custom::InitFunction
    DependsOn:
      - LambdaBucket
      - InitFunction
    Properties:
      ServiceToken: !GetAtt InitFunction.Arn
      BucketName: !Ref LambdaBucket
      NGDKeyName: ngd_wrappers_lambda.zip
      ONSKeyName: ons_geographies_lambda.zip
      ONSDBKeyName: ons_geographies_db.duckdb

  # === Lambda Function ===

  NGDWrapperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-NGDWrapper-Role
      Description: An execution role for the NGD Wrapper Lambda function
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: NGDWrapperLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: "lambda:InvokeFunction"
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${NGDWrapperLambdaFunctionName}"
        - PolicyName: NGDWrapperCloudWatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"

  NGDWrapperLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - Initialize
      - NGDWrapperLambdaRole
    Properties:
      Description: Provides a wrapper for the NGD API
      FunctionName: !Ref NGDWrapperLambdaFunctionName
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.13
      Role: !GetAtt NGDWrapperLambdaRole.Arn
      Timeout: 240
      Environment:
        Variables:
          CLIENT_ID: !Ref OSDataHubProjectKey
          CLIENT_SECRET: !Ref OSDataHubProjectSecret
      PackageType: Zip
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: ngd_wrappers_lambda.zip

  ONSGeographiesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-ONSGeographies-Role
      Description: An execution role for the ONS Geographies Proxy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ONSGeographiesLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: "lambda:InvokeFunction"
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ONSGeographiesLambdaFunctionName}"
        - PolicyName: ONSGeographiesCloudWatchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"

  ONSGeographiesLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - Initialize
      - ONSGeographiesLambdaRole
    Properties:
      Description: Proxy for the ONS Geographies Proxy
      FunctionName: !Ref ONSGeographiesLambdaFunctionName
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Runtime: python3.13
      Role: !GetAtt ONSGeographiesLambdaRole.Arn
      Timeout: 240
      Environment:
        Variables:
          ONSGEOGRAPHY_DB_BUCKET: !Ref S3BucketName
          ONSGEOGRAPHY_DB_FILE: !Ref ONSGeographyDBFilePath
      PackageType: Zip
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: ons_geographies_lambda.zip

  # === Cleanup: Delete Bootstrap Lambda and S3 Bucket ===

  CleanupBootstrapLambda:
    Type: Custom::InitFunction
    DependsOn:
      - NGDWrapperLambdaFunction
      - ONSGeographiesLambdaFunction
    Properties:
      ServiceToken: !GetAtt InitFunction.Arn
      BucketName: !Ref LambdaBucket
      NGDKeyName: ngd_wrappers_lambda.zip
      ONSKeyName: ons_geographies_lambda.zip
      Cleanup: true

  # === Lambda Permissions for API Gateway ===
  
  NGDWrapperApiGatewayInvokeLatest:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NGDWrapperLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${ApiGatewayStageName}/GET/catalyst/latest-collections"

  NGDWrapperApiGatewayInvokeLatestCollection:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NGDWrapperLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${ApiGatewayStageName}/GET/catalyst/latest-collections/*"

  NGDWrapperApiGatewayInvokeFeatures:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NGDWrapperLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${ApiGatewayStageName}/GET/catalyst/features/*/*"

  NGDWrapperApiGatewayInvokeFeaturesFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt NGDWrapperLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${ApiGatewayStageName}/GET/catalyst/features/*/*/*"

  ONSGeographiesApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ONSGeographiesLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/${ApiGatewayStageName}/GET/catalyst/ons-geographies/places/*"

  # === API Gateway: API, Endpoints, Methods ===

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Catalyst
      Description: API Gateway deployment for Geovation Catalyst tools. Deployed through CloudFormation.
      EndpointConfiguration:
        Types:
          - REGIONAL

  EndpointBase:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: 'catalyst'

  EndpointONS:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointBase
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: 'ons-geographies'

  EndpointONSPlaces:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointONS
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: 'places'

  EndpointONSPlacesOperation:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointONSPlaces
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: '{operation}'

  EndpointNGDLatestCollections:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointBase
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: 'latest-collections'
  
  EndpointNGDLatestCollectionsCollection:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointNGDLatestCollections
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: '{collection}'

  EndpointNGDFeatures:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointBase
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: 'features'

  EndpointNGDFeaturesCollection:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointNGDFeatures
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: '{collection}'

  EndpointNGDFeaturesCollectionItems:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointNGDFeaturesCollection
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: 'items'

  EndpointNGDFeaturesCollectionItemsFunction:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref EndpointNGDFeaturesCollectionItems
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: '{function}'

  MethodNGDLatestCollections:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !Ref GatewayAuthRequired
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref EndpointNGDLatestCollections
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt NGDWrapperLambdaFunction.Arn

  MethodNGDLatestCollectionsCollection:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !Ref GatewayAuthRequired
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref EndpointNGDLatestCollectionsCollection
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt NGDWrapperLambdaFunction.Arn

  MethodNGDItems:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !Ref GatewayAuthRequired
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref EndpointNGDFeaturesCollectionItems
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt NGDWrapperLambdaFunction.Arn

  MethodNGDItemsFunction:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !Ref GatewayAuthRequired
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref EndpointNGDFeaturesCollectionItemsFunction
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt NGDWrapperLambdaFunction.Arn

  MethodONS:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: !Ref GatewayAuthRequired
      HttpMethod: GET
      AuthorizationType: NONE
      ResourceId: !Ref EndpointONSPlacesOperation
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt ONSGeographiesLambdaFunction.Arn

  # === API Gateway Deployment and Authentication ===

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MethodNGDLatestCollections
      - MethodNGDLatestCollectionsCollection
      - MethodNGDItems
      - MethodNGDItemsFunction
      - MethodONS
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref ApiGatewayStageName
      Description: 'CatalyST API Gateway Deployment'

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Condition: GatewayAuthRequired
    DependsOn: ApiGatewayDeployment
    Properties:
      Description: Usage plan for the Catalyst API
      ApiStages:
        - ApiId: !Ref Api
          Stage: !Ref ApiGatewayStageName
      UsagePlanName: "My Usage Plan"

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Condition: GatewayAuthRequired
    Description: API Key for the Catalyst API
    Properties: 
      Description: API Key
      Name: !Ref ApiKeyName
      Enabled: True

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Condition: GatewayAuthRequired
    Description: Usage plan key for the Catalyst API
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}/
    Description: The URL to invoke the API Gateway endpoint

  NGDWrapperLambdaFunctionArn:
    Value: !GetAtt NGDWrapperLambdaFunction.Arn
    Description: The ARN of the Lambda function

  ONSGeographiesLambdaFunctionArn:
    Value: !GetAtt ONSGeographiesLambdaFunction.Arn
    Description: The ARN of the ONS Geographies Lambda function